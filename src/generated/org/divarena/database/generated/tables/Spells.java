/*
 * This file is generated by jOOQ.
 */
package org.divarena.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.divarena.database.generated.DivarenaDb;
import org.divarena.database.generated.Keys;
import org.divarena.database.generated.tables.records.SpellsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Spells extends TableImpl<SpellsRecord> {

    private static final long serialVersionUID = -639372546;

    /**
     * The reference instance of <code>divarena_db.spells</code>
     */
    public static final Spells SPELLS = new Spells();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpellsRecord> getRecordType() {
        return SpellsRecord.class;
    }

    /**
     * The column <code>divarena_db.spells.id</code>.
     */
    public final TableField<SpellsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.name</code>.
     */
    public final TableField<SpellsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.value</code>.
     */
    public final TableField<SpellsRecord, Integer> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.breed_id</code>.
     */
    public final TableField<SpellsRecord, Integer> BREED_ID = createField(DSL.name("breed_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.ap</code>.
     */
    public final TableField<SpellsRecord, Byte> AP = createField(DSL.name("ap"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.cast_per_player</code>.
     */
    public final TableField<SpellsRecord, Byte> CAST_PER_PLAYER = createField(DSL.name("cast_per_player"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.cast_per_turn</code>.
     */
    public final TableField<SpellsRecord, Byte> CAST_PER_TURN = createField(DSL.name("cast_per_turn"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.interval</code>.
     */
    public final TableField<SpellsRecord, Byte> INTERVAL = createField(DSL.name("interval"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.test_los</code>.
     */
    public final TableField<SpellsRecord, Byte> TEST_LOS = createField(DSL.name("test_los"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.test_free</code>.
     */
    public final TableField<SpellsRecord, Byte> TEST_FREE = createField(DSL.name("test_free"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.only_line</code>.
     */
    public final TableField<SpellsRecord, Byte> ONLY_LINE = createField(DSL.name("only_line"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.range_min</code>.
     */
    public final TableField<SpellsRecord, Byte> RANGE_MIN = createField(DSL.name("range_min"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.range_max</code>.
     */
    public final TableField<SpellsRecord, Byte> RANGE_MAX = createField(DSL.name("range_max"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.ai_target_id</code>.
     */
    public final TableField<SpellsRecord, Integer> AI_TARGET_ID = createField(DSL.name("ai_target_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.script_id</code>.
     */
    public final TableField<SpellsRecord, Integer> SCRIPT_ID = createField(DSL.name("script_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.use_automatic_description</code>.
     */
    public final TableField<SpellsRecord, Byte> USE_AUTOMATIC_DESCRIPTION = createField(DSL.name("use_automatic_description"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.spells.criterion</code>.
     */
    public final TableField<SpellsRecord, String> CRITERION = createField(DSL.name("criterion"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>divarena_db.spells</code> table reference
     */
    public Spells() {
        this(DSL.name("spells"), null);
    }

    /**
     * Create an aliased <code>divarena_db.spells</code> table reference
     */
    public Spells(String alias) {
        this(DSL.name(alias), SPELLS);
    }

    /**
     * Create an aliased <code>divarena_db.spells</code> table reference
     */
    public Spells(Name alias) {
        this(alias, SPELLS);
    }

    private Spells(Name alias, Table<SpellsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Spells(Name alias, Table<SpellsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Spells(Table<O> child, ForeignKey<O, SpellsRecord> key) {
        super(child, key, SPELLS);
    }

    @Override
    public Schema getSchema() {
        return DivarenaDb.DIVARENA_DB;
    }

    @Override
    public UniqueKey<SpellsRecord> getPrimaryKey() {
        return Keys.KEY_SPELLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SpellsRecord>> getKeys() {
        return Arrays.<UniqueKey<SpellsRecord>>asList(Keys.KEY_SPELLS_PRIMARY);
    }

    @Override
    public Spells as(String alias) {
        return new Spells(DSL.name(alias), this);
    }

    @Override
    public Spells as(Name alias) {
        return new Spells(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Spells rename(String name) {
        return new Spells(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Spells rename(Name name) {
        return new Spells(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, Integer, Integer, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Integer, Integer, Byte, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
