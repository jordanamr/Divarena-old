/*
 * This file is generated by jOOQ.
 */
package org.divarena.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.divarena.database.generated.DivarenaDb;
import org.divarena.database.generated.Keys;
import org.divarena.database.generated.tables.records.CountsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Counts extends TableImpl<CountsRecord> {

    private static final long serialVersionUID = -995586077;

    /**
     * The reference instance of <code>divarena_db.counts</code>
     */
    public static final Counts COUNTS = new Counts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountsRecord> getRecordType() {
        return CountsRecord.class;
    }

    /**
     * The column <code>divarena_db.counts.id</code>.
     */
    public final TableField<CountsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.counts.name</code>.
     */
    public final TableField<CountsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>divarena_db.counts.count</code>.
     */
    public final TableField<CountsRecord, Integer> COUNT = createField(DSL.name("count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>divarena_db.counts</code> table reference
     */
    public Counts() {
        this(DSL.name("counts"), null);
    }

    /**
     * Create an aliased <code>divarena_db.counts</code> table reference
     */
    public Counts(String alias) {
        this(DSL.name(alias), COUNTS);
    }

    /**
     * Create an aliased <code>divarena_db.counts</code> table reference
     */
    public Counts(Name alias) {
        this(alias, COUNTS);
    }

    private Counts(Name alias, Table<CountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Counts(Name alias, Table<CountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Counts(Table<O> child, ForeignKey<O, CountsRecord> key) {
        super(child, key, COUNTS);
    }

    @Override
    public Schema getSchema() {
        return DivarenaDb.DIVARENA_DB;
    }

    @Override
    public UniqueKey<CountsRecord> getPrimaryKey() {
        return Keys.KEY_COUNTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CountsRecord>> getKeys() {
        return Arrays.<UniqueKey<CountsRecord>>asList(Keys.KEY_COUNTS_PRIMARY, Keys.KEY_COUNTS_NAME);
    }

    @Override
    public Counts as(String alias) {
        return new Counts(DSL.name(alias), this);
    }

    @Override
    public Counts as(Name alias) {
        return new Counts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Counts rename(String name) {
        return new Counts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Counts rename(Name name) {
        return new Counts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
