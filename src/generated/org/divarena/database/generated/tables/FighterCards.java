/*
 * This file is generated by jOOQ.
 */
package org.divarena.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.divarena.database.generated.DivarenaDb;
import org.divarena.database.generated.Keys;
import org.divarena.database.generated.tables.records.FighterCardsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FighterCards extends TableImpl<FighterCardsRecord> {

    private static final long serialVersionUID = -1291562074;

    /**
     * The reference instance of <code>divarena_db.fighter_cards</code>
     */
    public static final FighterCards FIGHTER_CARDS = new FighterCards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FighterCardsRecord> getRecordType() {
        return FighterCardsRecord.class;
    }

    /**
     * The column <code>divarena_db.fighter_cards.id</code>.
     */
    public final TableField<FighterCardsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.name</code>.
     */
    public final TableField<FighterCardsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.type</code>.
     */
    public final TableField<FighterCardsRecord, Byte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.sub_type</code>.
     */
    public final TableField<FighterCardsRecord, Integer> SUB_TYPE = createField(DSL.name("sub_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.value</code>.
     */
    public final TableField<FighterCardsRecord, Integer> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.action_points</code>.
     */
    public final TableField<FighterCardsRecord, Byte> ACTION_POINTS = createField(DSL.name("action_points"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.only_line</code>.
     */
    public final TableField<FighterCardsRecord, Byte> ONLY_LINE = createField(DSL.name("only_line"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.range_min</code>.
     */
    public final TableField<FighterCardsRecord, Integer> RANGE_MIN = createField(DSL.name("range_min"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.range_max</code>.
     */
    public final TableField<FighterCardsRecord, Integer> RANGE_MAX = createField(DSL.name("range_max"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.test_los</code>.
     */
    public final TableField<FighterCardsRecord, Byte> TEST_LOS = createField(DSL.name("test_los"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.test_free</code>.
     */
    public final TableField<FighterCardsRecord, Byte> TEST_FREE = createField(DSL.name("test_free"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.allow_carried</code>.
     */
    public final TableField<FighterCardsRecord, Byte> ALLOW_CARRIED = createField(DSL.name("allow_carried"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.allow_carrying</code>.
     */
    public final TableField<FighterCardsRecord, Byte> ALLOW_CARRYING = createField(DSL.name("allow_carrying"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>divarena_db.fighter_cards.script_id</code>.
     */
    public final TableField<FighterCardsRecord, Integer> SCRIPT_ID = createField(DSL.name("script_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>divarena_db.fighter_cards</code> table reference
     */
    public FighterCards() {
        this(DSL.name("fighter_cards"), null);
    }

    /**
     * Create an aliased <code>divarena_db.fighter_cards</code> table reference
     */
    public FighterCards(String alias) {
        this(DSL.name(alias), FIGHTER_CARDS);
    }

    /**
     * Create an aliased <code>divarena_db.fighter_cards</code> table reference
     */
    public FighterCards(Name alias) {
        this(alias, FIGHTER_CARDS);
    }

    private FighterCards(Name alias, Table<FighterCardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FighterCards(Name alias, Table<FighterCardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FighterCards(Table<O> child, ForeignKey<O, FighterCardsRecord> key) {
        super(child, key, FIGHTER_CARDS);
    }

    @Override
    public Schema getSchema() {
        return DivarenaDb.DIVARENA_DB;
    }

    @Override
    public Identity<FighterCardsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FIGHTER_CARDS;
    }

    @Override
    public UniqueKey<FighterCardsRecord> getPrimaryKey() {
        return Keys.KEY_FIGHTER_CARDS_PRIMARY;
    }

    @Override
    public List<UniqueKey<FighterCardsRecord>> getKeys() {
        return Arrays.<UniqueKey<FighterCardsRecord>>asList(Keys.KEY_FIGHTER_CARDS_PRIMARY);
    }

    @Override
    public FighterCards as(String alias) {
        return new FighterCards(DSL.name(alias), this);
    }

    @Override
    public FighterCards as(Name alias) {
        return new FighterCards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FighterCards rename(String name) {
        return new FighterCards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FighterCards rename(Name name) {
        return new FighterCards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, String, Byte, Integer, Integer, Byte, Byte, Integer, Integer, Byte, Byte, Byte, Byte, Integer> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
