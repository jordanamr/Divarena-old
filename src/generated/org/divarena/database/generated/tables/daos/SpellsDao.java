/*
 * This file is generated by jOOQ.
 */
package org.divarena.database.generated.tables.daos;


import java.util.List;

import org.divarena.database.generated.tables.Spells;
import org.divarena.database.generated.tables.records.SpellsRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpellsDao extends DAOImpl<SpellsRecord, org.divarena.database.generated.tables.pojos.Spells, Integer> {

    /**
     * Create a new SpellsDao without any configuration
     */
    public SpellsDao() {
        super(Spells.SPELLS, org.divarena.database.generated.tables.pojos.Spells.class);
    }

    /**
     * Create a new SpellsDao with an attached configuration
     */
    public SpellsDao(Configuration configuration) {
        super(Spells.SPELLS, org.divarena.database.generated.tables.pojos.Spells.class, configuration);
    }

    @Override
    public Integer getId(org.divarena.database.generated.tables.pojos.Spells object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Spells.SPELLS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchById(Integer... values) {
        return fetch(Spells.SPELLS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.divarena.database.generated.tables.pojos.Spells fetchOneById(Integer value) {
        return fetchOne(Spells.SPELLS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Spells.SPELLS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByName(String... values) {
        return fetch(Spells.SPELLS.NAME, values);
    }

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfValue(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Spells.SPELLS.VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByValue(Integer... values) {
        return fetch(Spells.SPELLS.VALUE, values);
    }

    /**
     * Fetch records that have <code>breed_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfBreedId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Spells.SPELLS.BREED_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>breed_id IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByBreedId(Integer... values) {
        return fetch(Spells.SPELLS.BREED_ID, values);
    }

    /**
     * Fetch records that have <code>ap BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfAp(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.AP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ap IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByAp(Byte... values) {
        return fetch(Spells.SPELLS.AP, values);
    }

    /**
     * Fetch records that have <code>cast_per_player BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfCastPerPlayer(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.CAST_PER_PLAYER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cast_per_player IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByCastPerPlayer(Byte... values) {
        return fetch(Spells.SPELLS.CAST_PER_PLAYER, values);
    }

    /**
     * Fetch records that have <code>cast_per_turn BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfCastPerTurn(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.CAST_PER_TURN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cast_per_turn IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByCastPerTurn(Byte... values) {
        return fetch(Spells.SPELLS.CAST_PER_TURN, values);
    }

    /**
     * Fetch records that have <code>interval BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfInterval(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.INTERVAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>interval IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByInterval(Byte... values) {
        return fetch(Spells.SPELLS.INTERVAL, values);
    }

    /**
     * Fetch records that have <code>test_los BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfTestLos(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.TEST_LOS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_los IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByTestLos(Byte... values) {
        return fetch(Spells.SPELLS.TEST_LOS, values);
    }

    /**
     * Fetch records that have <code>test_free BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfTestFree(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.TEST_FREE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_free IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByTestFree(Byte... values) {
        return fetch(Spells.SPELLS.TEST_FREE, values);
    }

    /**
     * Fetch records that have <code>only_line BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfOnlyLine(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.ONLY_LINE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>only_line IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByOnlyLine(Byte... values) {
        return fetch(Spells.SPELLS.ONLY_LINE, values);
    }

    /**
     * Fetch records that have <code>range_min BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfRangeMin(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.RANGE_MIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>range_min IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByRangeMin(Byte... values) {
        return fetch(Spells.SPELLS.RANGE_MIN, values);
    }

    /**
     * Fetch records that have <code>range_max BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfRangeMax(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.RANGE_MAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>range_max IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByRangeMax(Byte... values) {
        return fetch(Spells.SPELLS.RANGE_MAX, values);
    }

    /**
     * Fetch records that have <code>ai_target_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfAiTargetId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Spells.SPELLS.AI_TARGET_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ai_target_id IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByAiTargetId(Integer... values) {
        return fetch(Spells.SPELLS.AI_TARGET_ID, values);
    }

    /**
     * Fetch records that have <code>script_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfScriptId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Spells.SPELLS.SCRIPT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>script_id IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByScriptId(Integer... values) {
        return fetch(Spells.SPELLS.SCRIPT_ID, values);
    }

    /**
     * Fetch records that have <code>use_automatic_description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfUseAutomaticDescription(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Spells.SPELLS.USE_AUTOMATIC_DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>use_automatic_description IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByUseAutomaticDescription(Byte... values) {
        return fetch(Spells.SPELLS.USE_AUTOMATIC_DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>criterion BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchRangeOfCriterion(String lowerInclusive, String upperInclusive) {
        return fetchRange(Spells.SPELLS.CRITERION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>criterion IN (values)</code>
     */
    public List<org.divarena.database.generated.tables.pojos.Spells> fetchByCriterion(String... values) {
        return fetch(Spells.SPELLS.CRITERION, values);
    }
}
